-- gold.v_bc_items source

CREATE OR REPLACE VIEW gold.v_bc_items as

WITH pl_aircon_active AS (
         SELECT s."SystemId",
            s."PriceListCode",
            s."LineNo",
            s."SourceType",
            s."SourceNo",
            s."SourceID",
            s."AssetType",
            s."AssetNo",
            s."AssetID",
            s."AssignToNo",
            s."AssignToParentNo",
            s."AmountType",
            s."Description",
            s."UnitPrice",
            s."UnitPricePLN",
            s."UnitOfMeasureCode",
            s."MinimumQuantity",
            s."LineDiscount",
            s."StartingDate",
            s."EndingDate",
            s."CurrencyCode",
            s."AllowLineDisc",
            s."AllowInvoiceDisc",
            s."VatProdPostingGroup",
            s."Status",
            s."PriceType",
            s."ProductNo",
            s."SystemModifiedAt",
            s."SystemCreatedAt",
            s."CustomerBestPrice",
            s."CustomerBestDiscount",
            s."Firma",
            s.load_ts,
            s.norm_currency,
            s.price_in_pln,
            s.rn
           FROM ( SELECT pl."SystemId",
                    pl."PriceListCode",
                    pl."LineNo",
                    pl."SourceType",
                    pl."SourceNo",
                    pl."SourceID",
                    pl."AssetType",
                    pl."AssetNo",
                    pl."AssetID",
                    pl."AssignToNo",
                    pl."AssignToParentNo",
                    pl."AmountType",
                    pl."Description",
                    pl."UnitPrice",
                    pl."UnitPricePLN",
                    pl."UnitOfMeasureCode",
                    pl."MinimumQuantity",
                    pl."LineDiscount",
                    pl."StartingDate",
                    pl."EndingDate",
                    pl."CurrencyCode",
                    pl."AllowLineDisc",
                    pl."AllowInvoiceDisc",
                    pl."VatProdPostingGroup",
                    pl."Status",
                    pl."PriceType",
                    pl."ProductNo",
                    pl."SystemModifiedAt",
                    pl."SystemCreatedAt",
                    pl."CustomerBestPrice",
                    pl."CustomerBestDiscount",
                    pl."Firma",
                    pl.load_ts,
                    COALESCE(NULLIF(TRIM(BOTH FROM pl."CurrencyCode"), ''::text), 'PLN'::text) AS norm_currency,
                        CASE
                            WHEN COALESCE(NULLIF(TRIM(BOTH FROM pl."CurrencyCode"), ''::text), 'PLN'::text) = 'PLN'::text THEN pl."UnitPrice"
                            ELSE pl."UnitPricePLN"
                        END AS price_in_pln,
                    row_number() OVER (PARTITION BY pl."AssetNo", (COALESCE(NULLIF(TRIM(BOTH FROM pl."CurrencyCode"), ''::text), 'PLN'::text)) ORDER BY pl."StartingDate" DESC, pl."EndingDate" DESC, (COALESCE(pl.load_ts, '1900-01-01 00:00:00'::timestamp without time zone::timestamp with time zone)) DESC) AS rn
                   FROM silver.bc_price_lists_aircon pl
                  WHERE pl."PriceListCode" = 'S00001'::text AND pl."StartingDate" <= CURRENT_DATE AND (pl."EndingDate" >= CURRENT_DATE OR pl."EndingDate" = '0001-01-01'::date)) s
          WHERE s.rn = 1
        ), pl_technab_active AS (
         SELECT s."SystemId",
            s."PriceListCode",
            s."LineNo",
            s."SourceType",
            s."SourceNo",
            s."SourceID",
            s."AssetType",
            s."AssetNo",
            s."AssetID",
            s."AssignToNo",
            s."AssignToParentNo",
            s."AmountType",
            s."Description",
            s."UnitPrice",
            s."UnitPricePLN",
            s."UnitOfMeasureCode",
            s."MinimumQuantity",
            s."LineDiscount",
            s."StartingDate",
            s."EndingDate",
            s."CurrencyCode",
            s."AllowLineDisc",
            s."AllowInvoiceDisc",
            s."VatProdPostingGroup",
            s."Status",
            s."PriceType",
            s."ProductNo",
            s."SystemModifiedAt",
            s."SystemCreatedAt",
            s."CustomerBestPrice",
            s."CustomerBestDiscount",
            s."Firma",
            s.load_ts,
            s.norm_currency,
            s.price_in_pln,
            s.rn
           FROM ( SELECT pl."SystemId",
                    pl."PriceListCode",
                    pl."LineNo",
                    pl."SourceType",
                    pl."SourceNo",
                    pl."SourceID",
                    pl."AssetType",
                    pl."AssetNo",
                    pl."AssetID",
                    pl."AssignToNo",
                    pl."AssignToParentNo",
                    pl."AmountType",
                    pl."Description",
                    pl."UnitPrice",
                    pl."UnitPricePLN",
                    pl."UnitOfMeasureCode",
                    pl."MinimumQuantity",
                    pl."LineDiscount",
                    pl."StartingDate",
                    pl."EndingDate",
                    pl."CurrencyCode",
                    pl."AllowLineDisc",
                    pl."AllowInvoiceDisc",
                    pl."VatProdPostingGroup",
                    pl."Status",
                    pl."PriceType",
                    pl."ProductNo",
                    pl."SystemModifiedAt",
                    pl."SystemCreatedAt",
                    pl."CustomerBestPrice",
                    pl."CustomerBestDiscount",
                    pl."Firma",
                    pl.load_ts,
                    COALESCE(NULLIF(TRIM(BOTH FROM pl."CurrencyCode"), ''::text), 'PLN'::text) AS norm_currency,
                        CASE
                            WHEN COALESCE(NULLIF(TRIM(BOTH FROM pl."CurrencyCode"), ''::text), 'PLN'::text) = 'PLN'::text THEN pl."UnitPrice"
                            ELSE pl."UnitPricePLN"
                        END AS price_in_pln,
                    row_number() OVER (PARTITION BY pl."AssetNo", (COALESCE(NULLIF(TRIM(BOTH FROM pl."CurrencyCode"), ''::text), 'PLN'::text)) ORDER BY pl."StartingDate" DESC, pl."EndingDate" DESC, (COALESCE(pl.load_ts, '1900-01-01 00:00:00'::timestamp without time zone::timestamp with time zone)) DESC) AS rn
                   FROM silver.bc_price_lists_technab pl
                  WHERE pl."PriceListCode" = 'S00001'::text AND pl."StartingDate" <= CURRENT_DATE AND (pl."EndingDate" >= CURRENT_DATE OR pl."EndingDate" = '0001-01-01'::date)) s
          WHERE s.rn = 1
        ), pl_zymetric_active AS (
         SELECT s."SystemId",
            s."PriceListCode",
            s."LineNo",
            s."SourceType",
            s."SourceNo",
            s."SourceID",
            s."AssetType",
            s."AssetNo",
            s."AssetID",
            s."AssignToNo",
            s."AssignToParentNo",
            s."AmountType",
            s."Description",
            s."UnitPrice",
            s."UnitPricePLN",
            s."UnitOfMeasureCode",
            s."MinimumQuantity",
            s."LineDiscount",
            s."StartingDate",
            s."EndingDate",
            s."CurrencyCode",
            s."AllowLineDisc",
            s."AllowInvoiceDisc",
            s."VatProdPostingGroup",
            s."Status",
            s."PriceType",
            s."ProductNo",
            s."SystemModifiedAt",
            s."SystemCreatedAt",
            s."CustomerBestPrice",
            s."CustomerBestDiscount",
            s."Firma",
            s.load_ts,
            s.norm_currency,
            s.price_in_pln,
            s.rn
           FROM ( SELECT pl."SystemId",
                    pl."PriceListCode",
                    pl."LineNo",
                    pl."SourceType",
                    pl."SourceNo",
                    pl."SourceID",
                    pl."AssetType",
                    pl."AssetNo",
                    pl."AssetID",
                    pl."AssignToNo",
                    pl."AssignToParentNo",
                    pl."AmountType",
                    pl."Description",
                    pl."UnitPrice",
                    pl."UnitPricePLN",
                    pl."UnitOfMeasureCode",
                    pl."MinimumQuantity",
                    pl."LineDiscount",
                    pl."StartingDate",
                    pl."EndingDate",
                    pl."CurrencyCode",
                    pl."AllowLineDisc",
                    pl."AllowInvoiceDisc",
                    pl."VatProdPostingGroup",
                    pl."Status",
                    pl."PriceType",
                    pl."ProductNo",
                    pl."SystemModifiedAt",
                    pl."SystemCreatedAt",
                    pl."CustomerBestPrice",
                    pl."CustomerBestDiscount",
                    pl."Firma",
                    pl.load_ts,
                    COALESCE(NULLIF(TRIM(BOTH FROM pl."CurrencyCode"), ''::text), 'PLN'::text) AS norm_currency,
                        CASE
                            WHEN COALESCE(NULLIF(TRIM(BOTH FROM pl."CurrencyCode"), ''::text), 'PLN'::text) = 'PLN'::text THEN pl."UnitPrice"
                            ELSE pl."UnitPricePLN"
                        END AS price_in_pln,
                    row_number() OVER (PARTITION BY pl."AssetNo", (COALESCE(NULLIF(TRIM(BOTH FROM pl."CurrencyCode"), ''::text), 'PLN'::text)) ORDER BY pl."StartingDate" DESC, pl."EndingDate" DESC, (COALESCE(pl.load_ts, '1900-01-01 00:00:00'::timestamp without time zone::timestamp with time zone)) DESC) AS rn
                   FROM silver.bc_price_lists_zymetric pl
                  WHERE pl."PriceListCode" = 'S00001'::text AND pl."StartingDate" <= CURRENT_DATE AND (pl."EndingDate" >= CURRENT_DATE OR pl."EndingDate" = '0001-01-01'::date)) s
          WHERE s.rn = 1
        ), items_aircon AS (
         SELECT i."No" AS "NoItem",
            i."Key_Item_No" AS "KeyNoItem",
            max(i."No_2") AS "Indeks PIM",
            max(i."Inventory") AS "StockQuantity",
            max(i."Mk_GL_Quantity") AS "MKGLStockQuantity",
            max(i."Unit_Cost") AS "UnitCost",
            max(pl.price_in_pln) AS "UnitPricePLN",
            max(pl."UnitPrice") FILTER (WHERE pl.norm_currency = 'CZK'::text) AS "UnitPriceCZK",
            max(pl."UnitPrice") FILTER (WHERE pl.norm_currency = 'USD'::text) AS "UnitPriceUSD",
            max(pl."UnitPrice") FILTER (WHERE pl.norm_currency = 'EUR'::text) AS "UnitPriceEUR",
            max(pl."UnitPrice") FILTER (WHERE pl.norm_currency = 'GBP'::text) AS "UnitPriceGBP",
            max(i."Base_Unit_Of_Measure") AS "UnitOfMeasure",
            max(i."Base_Group") AS "InventoryGroup",
            max(i."Edn_Type_A") AS "ItemTypeA",
            max(i."Edn_Type_B") AS "ItemTypeB",
            max(i."Costing_Method") AS "ValuationMethod",
            max(i."Description") AS "Description",
            max(i."Description_2") AS "Description2",
            max(i."Edn_Cooling_Capacity_KW") AS "CoolingCapacity",
            max(i."Edn_Heating_Capacity_KW") AS "HeatingCapacity",
            max(i."Edn_Efficiency_Index") AS "PerformanceIndex",
            max(i."Edn_Factor_Type") AS "Refrigerant",
            max(i."Edn_Refrigerant_Quantity_UoM") AS "RefrigerantQuantity",
            max(i."Gen_Prod_Posting_Group") AS "MainInventoryAccountingGroup",
            max(i."Inventory_Posting_Group") AS "InventoryPostingGroup",
            max(i."Manufacturer_Code") AS "ManufacturerCode",
            max(i."Qty_On_Purch_Order") AS "PurchaseOrderQuantity",
            max(i."Qty_On_Sales_Order") AS "SalesOrderQuantity",
            max(i."Qty_On_Service_Order") AS "ServiceOrderQuantity",
            max(i."Reserved_Qty_On_Inventory") AS "ReservedInventoryQuantity",
            max(i."Reserved_Qty_On_Purch_Orders") AS "ReservedPurchaseOrderQuantity",
            max(i."Reserved_Qty_On_Sales_Orders") AS "ReservedSalesOrderQuantity",
            i."Blocked",
            max(i."System_Id") AS "SystemID",
            max(i."Net_Weight") AS "NetWeight",
            max(i."Edn_Battery_Code") AS "EdnBatteryCode",
            i."Edn_Battery_Item" AS "EdnBatteryItem",
            max(i."Edn_Battery_Quantity") AS "EdnBatteryQuantity",
            max(i."Vendor_No") AS "VendorNo",
            max(i."System_Modified_At") AS "SystemModifiedAt",
            max(i.load_ts) AS "LoadDate",
            'Aircon'::text AS "Company"
           FROM silver.bc_items_aircon i
             LEFT JOIN pl_aircon_active pl ON upper(TRIM(BOTH FROM i."No")) = upper(TRIM(BOTH FROM pl."AssetNo"))
          WHERE i."Inventory_Posting_Group" <> 'USŁUGI'::text
          GROUP BY i."No", i."Blocked", i."Edn_Battery_Item"
        ), items_technab AS (
         SELECT i."No" AS "NoItem",
            i."Key_Item_No" AS "KeyNoItem",
            max(i."No_2") AS "Indeks PIM",
            max(i."Inventory") AS "StockQuantity",
            max(i."Mk_GL_Quantity") AS "MKGLStockQuantity",
            max(i."Unit_Cost") AS "UnitCost",
            max(pl.price_in_pln) AS "UnitPricePLN",
            max(pl."UnitPrice") FILTER (WHERE pl.norm_currency = 'CZK'::text) AS "UnitPriceCZK",
            max(pl."UnitPrice") FILTER (WHERE pl.norm_currency = 'USD'::text) AS "UnitPriceUSD",
            max(pl."UnitPrice") FILTER (WHERE pl.norm_currency = 'EUR'::text) AS "UnitPriceEUR",
            max(pl."UnitPrice") FILTER (WHERE pl.norm_currency = 'GBP'::text) AS "UnitPriceGBP",
            max(i."Base_Unit_Of_Measure") AS "UnitOfMeasure",
            max(i."Base_Group") AS "InventoryGroup",
            max(i."Edn_Type_A") AS "ItemTypeA",
            max(i."Edn_Type_B") AS "ItemTypeB",
            max(i."Costing_Method") AS "ValuationMethod",
            max(i."Description") AS "Description",
            max(i."Description_2") AS "Description2",
            max(i."Edn_Cooling_Capacity_KW") AS "CoolingCapacity",
            max(i."Edn_Heating_Capacity_KW") AS "HeatingCapacity",
            max(i."Edn_Efficiency_Index") AS "PerformanceIndex",
            max(i."Edn_Factor_Type") AS "Refrigerant",
            max(i."Edn_Refrigerant_Quantity_UoM") AS "RefrigerantQuantity",
            max(i."Gen_Prod_Posting_Group") AS "MainInventoryAccountingGroup",
            max(i."Inventory_Posting_Group") AS "InventoryPostingGroup",
            max(i."Manufacturer_Code") AS "ManufacturerCode",
            max(i."Qty_On_Purch_Order") AS "PurchaseOrderQuantity",
            max(i."Qty_On_Sales_Order") AS "SalesOrderQuantity",
            max(i."Qty_On_Service_Order") AS "ServiceOrderQuantity",
            max(i."Reserved_Qty_On_Inventory") AS "ReservedInventoryQuantity",
            max(i."Reserved_Qty_On_Purch_Orders") AS "ReservedPurchaseOrderQuantity",
            max(i."Reserved_Qty_On_Sales_Orders") AS "ReservedSalesOrderQuantity",
            i."Blocked",
            max(i."System_Id") AS "SystemID",
            max(i."Net_Weight") AS "NetWeight",
            max(i."Edn_Battery_Code") AS "EdnBatteryCode",
            i."Edn_Battery_Item" AS "EdnBatteryItem",
            max(i."Edn_Battery_Quantity") AS "EdnBatteryQuantity",
            max(i."Vendor_No") AS "VendorNo",
            max(i."System_Modified_At") AS "SystemModifiedAt",
            max(i.load_ts) AS "LoadDate",
            'Technab'::text AS "Company"
           FROM silver.bc_items_technab i
             LEFT JOIN pl_technab_active pl ON upper(TRIM(BOTH FROM i."No")) = upper(TRIM(BOTH FROM pl."AssetNo"))
          WHERE i."Inventory_Posting_Group" <> 'USŁUGI'::text
          GROUP BY i."No", i."Blocked", i."Edn_Battery_Item"
        ), items_zymetric AS (
         SELECT i."No" AS "NoItem",
            i."Key_Item_No" AS "KeyNoItem",
            max(i."No_2") AS "Indeks PIM",
            max(i."Inventory") AS "StockQuantity",
            max(i."Mk_GL_Quantity") AS "MKGLStockQuantity",
            max(i."Unit_Cost") AS "UnitCost",
            max(pl.price_in_pln) AS "UnitPricePLN",
            max(pl."UnitPrice") FILTER (WHERE pl.norm_currency = 'CZK'::text) AS "UnitPriceCZK",
            max(pl."UnitPrice") FILTER (WHERE pl.norm_currency = 'USD'::text) AS "UnitPriceUSD",
            max(pl."UnitPrice") FILTER (WHERE pl.norm_currency = 'EUR'::text) AS "UnitPriceEUR",
            max(pl."UnitPrice") FILTER (WHERE pl.norm_currency = 'GBP'::text) AS "UnitPriceGBP",
            max(i."Base_Unit_Of_Measure") AS "UnitOfMeasure",
            max(i."Base_Group") AS "InventoryGroup",
            max(i."Edn_Type_A") AS "ItemTypeA",
            max(i."Edn_Type_B") AS "ItemTypeB",
            max(i."Costing_Method") AS "ValuationMethod",
            max(i."Description") AS "Description",
            max(i."Description_2") AS "Description2",
            max(i."Edn_Cooling_Capacity_KW") AS "CoolingCapacity",
            max(i."Edn_Heating_Capacity_KW") AS "HeatingCapacity",
            max(i."Edn_Efficiency_Index") AS "PerformanceIndex",
            max(i."Edn_Factor_Type") AS "Refrigerant",
            max(i."Edn_Refrigerant_Quantity_UoM") AS "RefrigerantQuantity",
            max(i."Gen_Prod_Posting_Group") AS "MainInventoryAccountingGroup",
            max(i."Inventory_Posting_Group") AS "InventoryPostingGroup",
            max(i."Manufacturer_Code") AS "ManufacturerCode",
            max(i."Qty_On_Purch_Order") AS "PurchaseOrderQuantity",
            max(i."Qty_On_Sales_Order") AS "SalesOrderQuantity",
            max(i."Qty_On_Service_Order") AS "ServiceOrderQuantity",
            max(i."Reserved_Qty_On_Inventory") AS "ReservedInventoryQuantity",
            max(i."Reserved_Qty_On_Purch_Orders") AS "ReservedPurchaseOrderQuantity",
            max(i."Reserved_Qty_On_Sales_Orders") AS "ReservedSalesOrderQuantity",
            i."Blocked",
            max(i."System_Id") AS "SystemID",
            max(i."Net_Weight") AS "NetWeight",
            max(i."Edn_Battery_Code") AS "EdnBatteryCode",
            i."Edn_Battery_Item" AS "EdnBatteryItem",
            max(i."Edn_Battery_Quantity") AS "EdnBatteryQuantity",
            max(i."Vendor_No") AS "VendorNo",
            max(i."System_Modified_At") AS "SystemModifiedAt",
            max(i.load_ts) AS "LoadDate",
            'Zymetric'::text AS "Company"
           FROM silver.bc_items_zymetric i
             LEFT JOIN pl_zymetric_active pl ON upper(TRIM(BOTH FROM i."No")) = upper(TRIM(BOTH FROM pl."AssetNo"))
          WHERE i."Inventory_Posting_Group" <> 'USŁUGI'::text
          GROUP BY i."No", i."Blocked", i."Edn_Battery_Item"
        )
 SELECT items_aircon."NoItem",
    items_aircon."KeyNoItem",
    items_aircon."Indeks PIM",
    items_aircon."StockQuantity",
    items_aircon."MKGLStockQuantity",
    case
	    when items_aircon."UnitOfMeasure" = 'KPL' then items_aircon."UnitPricePLN"
	    else items_aircon."UnitCost"
	end as "UnitCost",
    items_aircon."UnitPricePLN",
    items_aircon."UnitPriceCZK",
    items_aircon."UnitPriceUSD",
    items_aircon."UnitPriceEUR",
    items_aircon."UnitPriceGBP",
    items_aircon."UnitOfMeasure",
    items_aircon."InventoryGroup",
    items_aircon."ItemTypeA",
    items_aircon."ItemTypeB",
    items_aircon."ValuationMethod",
    items_aircon."Description",
    items_aircon."Description2",
    items_aircon."CoolingCapacity",
    items_aircon."HeatingCapacity",
    items_aircon."PerformanceIndex",
    items_aircon."Refrigerant",
    items_aircon."RefrigerantQuantity",
    items_aircon."MainInventoryAccountingGroup",
    items_aircon."InventoryPostingGroup",
    items_aircon."ManufacturerCode",
    items_aircon."PurchaseOrderQuantity",
    items_aircon."SalesOrderQuantity",
    items_aircon."ServiceOrderQuantity",
    items_aircon."ReservedInventoryQuantity",
    items_aircon."ReservedPurchaseOrderQuantity",
    items_aircon."ReservedSalesOrderQuantity",
    items_aircon."Blocked",
    items_aircon."SystemID",
    items_aircon."NetWeight",
    items_aircon."EdnBatteryCode",
    items_aircon."EdnBatteryItem",
    items_aircon."EdnBatteryQuantity",
    items_aircon."VendorNo",
    items_aircon."SystemModifiedAt",
    items_aircon."LoadDate",
    items_aircon."Company"
   FROM items_aircon
UNION ALL
 SELECT items_technab."NoItem",
    items_technab."KeyNoItem",
    items_technab."Indeks PIM",
    items_technab."StockQuantity",
    items_technab."MKGLStockQuantity",
    case
	    when items_technab."UnitOfMeasure" = 'KPL' then items_technab."UnitPricePLN"
	    else items_technab."UnitCost"
	end as "UnitCost",
    items_technab."UnitPricePLN",
    items_technab."UnitPriceCZK",
    items_technab."UnitPriceUSD",
    items_technab."UnitPriceEUR",
    items_technab."UnitPriceGBP",
    items_technab."UnitOfMeasure",
    items_technab."InventoryGroup",
    items_technab."ItemTypeA",
    items_technab."ItemTypeB",
    items_technab."ValuationMethod",
    items_technab."Description",
    items_technab."Description2",
    items_technab."CoolingCapacity",
    items_technab."HeatingCapacity",
    items_technab."PerformanceIndex",
    items_technab."Refrigerant",
    items_technab."RefrigerantQuantity",
    items_technab."MainInventoryAccountingGroup",
    items_technab."InventoryPostingGroup",
    items_technab."ManufacturerCode",
    items_technab."PurchaseOrderQuantity",
    items_technab."SalesOrderQuantity",
    items_technab."ServiceOrderQuantity",
    items_technab."ReservedInventoryQuantity",
    items_technab."ReservedPurchaseOrderQuantity",
    items_technab."ReservedSalesOrderQuantity",
    items_technab."Blocked",
    items_technab."SystemID",
    items_technab."NetWeight",
    items_technab."EdnBatteryCode",
    items_technab."EdnBatteryItem",
    items_technab."EdnBatteryQuantity",
    items_technab."VendorNo",
    items_technab."SystemModifiedAt",
    items_technab."LoadDate",
    items_technab."Company"
   FROM items_technab
UNION ALL
 SELECT items_zymetric."NoItem",
    items_zymetric."KeyNoItem",
    items_zymetric."Indeks PIM",
    items_zymetric."StockQuantity",
    items_zymetric."MKGLStockQuantity",
    case
	    when items_zymetric."UnitOfMeasure" = 'KPL' then items_zymetric."UnitPriceEUR"
	    else items_zymetric."UnitCost"
	end as "UnitCost",
    items_zymetric."UnitPricePLN",
    items_zymetric."UnitPriceCZK",
    items_zymetric."UnitPriceUSD",
    items_zymetric."UnitPriceEUR",
    items_zymetric."UnitPriceGBP",
    items_zymetric."UnitOfMeasure",
    items_zymetric."InventoryGroup",
    items_zymetric."ItemTypeA",
    items_zymetric."ItemTypeB",
    items_zymetric."ValuationMethod",
    items_zymetric."Description",
    items_zymetric."Description2",
    items_zymetric."CoolingCapacity",
    items_zymetric."HeatingCapacity",
    items_zymetric."PerformanceIndex",
    items_zymetric."Refrigerant",
    items_zymetric."RefrigerantQuantity",
    items_zymetric."MainInventoryAccountingGroup",
    items_zymetric."InventoryPostingGroup",
    items_zymetric."ManufacturerCode",
    items_zymetric."PurchaseOrderQuantity",
    items_zymetric."SalesOrderQuantity",
    items_zymetric."ServiceOrderQuantity",
    items_zymetric."ReservedInventoryQuantity",
    items_zymetric."ReservedPurchaseOrderQuantity",
    items_zymetric."ReservedSalesOrderQuantity",
    items_zymetric."Blocked",
    items_zymetric."SystemID",
    items_zymetric."NetWeight",
    items_zymetric."EdnBatteryCode",
    items_zymetric."EdnBatteryItem",
    items_zymetric."EdnBatteryQuantity",
    items_zymetric."VendorNo",
    items_zymetric."SystemModifiedAt",
    items_zymetric."LoadDate",
    items_zymetric."Company"
   FROM items_zymetric;